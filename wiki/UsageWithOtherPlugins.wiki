#summary Integration guide with other plugins (i.e. war packaging)
#labels other,package,war

= Usage when building WARs =

Currently, the replacer plugin needs access to a target resource *before* it is packaged into an archive. However, standard WAR packaging does not expose web resources (anything under src/main/webapp) for use in other plugins and runs as a single execution.
Fortunately, we can invoke war:exploded to copy these resources earlier in the build lifecycle so that they can be used by the maven-replacer-plugin. The standard package usage will then use the modified web resources when creating the WAR artifact.

{{{
<plugin>
    <groupId>com.google.code.maven-replacer-plugin</groupId>
    <artifactId>maven-replacer-plugin</artifactId>
    <version>(version)</version>
    <executions>
        <execution>
            <phase>prepare-package</phase>
            <goals>
                <goal>replace</goal>
            </goals>            
        </execution>
    </executions>
    <configuration>
        <file>target/${project.build.finalName}/WEB-INF/helloWorld.jsp</file>
        <token>TOKEN</token>
        <value>VALUE</value>
    </configuration>
</plugin>
}}}

There needs to be a hooking spot for running replacements on files before they are packaged into a war. Make sure you add this BEFORE the maven-replacer-plugin if they both execute in the same phase (i.e. prepare-package).
Use the following war plugin configuration to allow the files to be modified before being packaged:
{{{
<plugin>
   <groupId>org.apache.maven.plugins</groupId>
   <artifactId>maven-war-plugin</artifactId>
   <version>2.1.1</version>
   <executions>
     <execution>
       <id>prepare-war</id>
       <phase>prepare-package</phase>
       <goals>
         <goal>exploded</goal>
       </goals>
     </execution>
   </executions>
</plugin>
}}}