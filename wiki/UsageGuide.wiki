#summary Usage guide (how to use and parameter definitions)
#labels userguide

= Usage Guide =

===Parameters to used in any execution===
<table border="1" width="800" cellpadding="5">
<tr>
<th width="100">Parameter</th><th width="150">Required</th><th>Description</th>
</tr>
<tr>
<td>phase</td><td>no (default: compile)</td><td>The desired phase can easily be redefined here. Typically used phases are: compile, test and prepare-package.</td></tr>
<tr>
<td>goal</td><td>yes</td><td>Always "replace".</td></tr>
</table>

===Selecting which files to perform replacements upon===
<table border="1" width="800" cellpadding="5">
<tr>
<th width="100">Parameter</th><th width="150">Required</th><th>Description</th>
</tr>
<tr>
<td>includes:include</td><td>(see note below)</td><td>List of files to include for multiple (or single) replacement. In Ant format (`*`/directory/`*``*`.properties) </td></tr>
<tr>
<td>excludes:exclude</td><td>no</td><td>List of files to exclude (must have some includes) for multiple (or single) replacement. In Ant format (`*``*`/directory/do-not-replace.properties). The files replaced will be derived from the list of includes and excludes.</td></tr>
<tr>
<td>filesToInclude</td><td>(see note below)</td><td>List of comma separated files to include for multiple (or single) replacement. In Ant format (`*`/directory/`*``*`.properties) </td></tr>
<tr>
<td>filesToExclude</td><td>no</td><td>List of comma separated files to exclude (must have some includes) for multiple (or single) replacement. In Ant format (`*``*`/directory/do-not-replace.properties). The files replaced will be derived from the list of includes and excludes.</td></tr>
<tr>
<td>file</td><td>(see note below)</td><td>Path to single file to replace tokens in. The file must be text (ascii). Based on current execution path.</td></tr>
<tr>
<td>ignoreMissingFile</td><td>no (default: false)</td><td>Set to true to not fail build if the file is not found. First checks if file exists and exits without attempting to replace anything.</td></tr>
<tr>
<td>outputFile</td><td>no (default: file)</td><td>The input file is read and the final output (after replacing tokens) is written to this file. The path and file are created if it does not exist. If it does exist, the contents are overwritten. You should not use outputFile when using a list of includes.</td></tr>
<tr>
<td>basedir</td><td>no</td><td>Path to base relative files for replacements from. (Default "." which is the default Maven basedir). This feature is useful for multi-module projects.</td></tr>
</table>

Note: You must either supply a file, or list of includes (excludes are optional).

===Parameters for replacing text===
<table border="1" width="800" cellpadding="5">
<tr>
<th width="100">Parameter</th><th width="150">Required</th><th>Description</th>
</tr>
<tr>
<td>token</td><td>(see note below)</td><td>The text to replace within the given file. This may or may not be a regular expression (see regex notes above).</td></tr>
<tr>
<td>tokenValueMap</td><td>(see note below)</td><td>A file containing tokens and respective values to replace with. This file may contain multiple entries to support a single file containing different tokens to have replaced. Each token/value pair should be in the format: "token (new line) value" (without quotations).</td></tr>
<tr>
<td>tokenFile</td><td>(see note below)</td><td>A file containing the token to be replaced. May be multiple words or lines. This is useful if you do not wish to expose the token within your pom or the token is long.</td></tr>
<tr>
<td>value</td><td>no (default: empty)</td><td>The text to be written over any found tokens. If no value is given, the tokens found are replaced with an empty string (effectively removing any tokens found).</td></tr>
<tr>
<td>valueFile</td><td>no</td><td>A file containing a value to replace the given token with. May be multiple words or lines. This is useful if you do not wish to expose the value within your pom or the value is long.</td></tr>
<tr>
<td>regex</td><td>no (default: true)</td><td>Indicates if the token should be located with regular expressions. This should be set to false if the token contains regex characters which may miss the desired tokens or even replace the wrong tokens.</td></tr>
<tr>
<td>regexFlags:regexFlag</td><td>no (list cannot be empty if used)</td><td>List of standard Java regular expression Pattern flags (see [http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html#field_summary Java Doc]). May contain multiple flags. May only be of the following: CANON_EQ, CASE_INSENSITIVE, COMMENTS, DOTALL, LITERAL, MULTILINE, UNICODE_CASE, UNIX_LINES.</td></tr>
<tr>
<td>replacements:replacement</td><td>no (list of token/value pairs to replace within the given file)</td><td>Each replacement element to contain sub-elements as token/value pairs. Each token within the given file will be replaced by it's respective value.</td></tr>
</table>

Note: Either a token, tokenFile or tokenValueMap is required. An execution should not contain more than one of these.

----
===Examples===
Note: As you can see each example's configuration has been placed inside the executions. This means that each configuration is applied only when invoked by it's phase. Alternatively, you can place the configuration outside the executions so that they are applied globally (including command line invocation). See http://maven.apache.org/guides/mini/guide-configuring-plugins.html

Complete examples can be found in the plugin's test utility. http://code.google.com/p/maven-replacer-plugin/source/browse/test-plugin-use/pom.xml

*Single regex file replacement with output file:*
{{{
<build>
    <plugins>
        ...
        <plugin>
            <groupId>com.google.code.maven-replacer-plugin</groupId>
            <artifactId>maven-replacer-plugin</artifactId>
            <version>1.3.1</version>
            <executions>
                <execution>
                    <phase>prepare-package</phase>
                    <goals>
                        <goal>replace</goal>
                    </goals>
                    <configuration>
                        <ignoreMissingFile>true</ignoreMissingFile>
                        <file>target/someapp/jsp/helloWorld.jsp</file>
                        <outputFile>
                            target/someapp/jsp/helloWorld-updated.jsp
                        </outputFile>
                        <regex>false</regex>
                        <token>$BUILD_NUMBER$</token>
                        <value>${buildNumber}</value>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        ...
    </plugins>
</build>
}}}

*Using regular expression flags:* 
{{{
<build>
    <plugins>
        ...
        <plugin>
            <groupId>com.google.code.maven-replacer-plugin</groupId>
            <artifactId>maven-replacer-plugin</artifactId>
            <version>1.3.1</version>
            <executions>
                <execution>
                    <phase>prepare-package</phase>
                    <goals>
                        <goal>replace</goal>
                    </goals>
                    <configuration>
                        <file>target/someapp/jsp/helloWorld.jsp</file>
                        <token>ToKeN</token>
                        <value>value</value>
                        <regexFlags>
                           <regexFlag>CASE_INSENSITIVE</regexFlag>
                           <regexFlag>MULTILINE</regexFlag>
                        </regexFlags>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        ...
    </plugins>
</build>
}}}

*Multiple file replacement:*
{{{
<build>
    <plugins>
        ...
        <plugin>
            <groupId>com.google.code.maven-replacer-plugin</groupId>
            <artifactId>maven-replacer-plugin</artifactId>
            <version>1.3.1</version>
            <executions>                
                <execution>
                    <phase>prepare-package</phase>
                    <goals>
                        <goal>replace</goal>
                    </goals>
                    <configuration>
                        <includes>
                            <include>target/**/replace-me.*</include>
                        </includes>
                        <excludes>
                            <exclude>target/**/do-not-replace-me.*</exclude>
                        </excludes>
                        <token>TOKEN</token>
                        <value>VALUE</value>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        ...
    </plugins>
</build>
}}}

*Single file replacement using a tokenValueMap:*
{{{
<build>
    <plugins>
        ...
        <plugin>
            <groupId>com.google.code.maven-replacer-plugin</groupId>
            <artifactId>maven-replacer-plugin</artifactId>
            <version>1.3.1</version>
            <executions>                
                <execution>
                    <phase>prepare-package</phase>
                    <goals>
                        <goal>replace</goal>
                    </goals>
                    <configuration>
                        <file>target/classes/database.properties</file>
                        <tokenValueMap>etc/${environment}/database.conf</tokenValueMap>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        ...
    </plugins>
</build>
}}}

*Multiple token/value replacements per file:*
{{{
<build>
    <plugins>
        ...
        <plugin>
            <groupId>com.google.code.maven-replacer-plugin</groupId>
            <artifactId>maven-replacer-plugin</artifactId>
            <version>1.3.1</version>
            <executions>                
                <execution>
                    <phase>prepare-package</phase>
                    <goals>
                        <goal>replace</goal>
                    </goals>
                    <configuration>
                        <file>target/classes/database.properties</file>
                        <replacements>
                            <replacement>
                                <token>token1</token>
                                <value>value1</value>
                            </replacement>
                            <replacement>
                                <token>token2</token>
                                <value>value2</value>
                            </replacement>
                        </replacements>                        
                    </configuration>
                </execution>
            </executions>
        </plugin>
        ...
    </plugins>
</build>
}}}

Notes on some difficulties integrating maven-replacer-plugin into your build:

The phase and time of execution depends largely on the desired use and the type of packaging. There can be issues with WAR packaging and replacing content at the right time to be included up by the WAR (See [UsageWithOtherPlugins Usage with other plugins]).